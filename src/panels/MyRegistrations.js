import React, { useState, useEffect } from 'react';
import { 
  Panel, 
  PanelHeader, 
  Group, 
  Div,
  Placeholder,
  Title,
  Text
} from '@vkontakte/vkui';
import { Icon28HeartCircleOutline } from '@vkontakte/icons';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import { registrationsAPI, eventsAPI, handleAPIError } from '../services/api';
import { EventCard } from '../components/EventCard';
import { Navigation } from '../components/Navigation';
import PropTypes from 'prop-types';

export const MyRegistrations = ({ id, fetchedUser }) => {
  const [registeredEvents, setRegisteredEvents] = useState([]);
  const [activeTab, setActiveTab] = useState('my_registrations');
  const routeNavigator = useRouteNavigator();

  useEffect(() => {
    loadRegisteredEvents();
  }, [fetchedUser]);

  const loadRegisteredEvents = async () => {
    if (!fetchedUser) return;
    
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const response = await registrationsAPI.getMyRegistrations();
      console.log('üìã –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response);
      console.log('üìä –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', response.data);
      
      // –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
      const eventIds = response.data.map(registration => registration.event_id);
      console.log('üéØ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', eventIds);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
      const events = [];
      for (const eventId of eventIds) {
        try {
          const eventResponse = await eventsAPI.getById(eventId);
          if (eventResponse.data) {
            events.push(eventResponse.data);
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${eventId}:`, error);
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–±–ª–∏–∂–∞–π—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
      const sortedEvents = events.sort((a, b) => new Date(a.date) - new Date(b.date));
      setRegisteredEvents(sortedEvents);
      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', sortedEvents);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error);
      const errorMessage = handleAPIError(error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å snackbar –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
    }
  };

  const handleEventPress = (event) => {
    routeNavigator.push(`/event/${event.id}`);
  };

  const renderRegisteredEvents = () => {
    if (!fetchedUser) {
      return (
        <Placeholder
          icon={<Icon28HeartCircleOutline style={{ color: '#0077FF' }} />}
          header="–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        >
          <Text style={{ color: '#AAAAAA' }}>
            –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          </Text>
        </Placeholder>
      );
    }

    if (registeredEvents.length === 0) {
      return (
        <Placeholder
          icon={<Icon28HeartCircleOutline style={{ color: '#0077FF' }} />}
          header="–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        >
          <Text style={{ color: '#AAAAAA' }}>
            –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ
          </Text>
        </Placeholder>
      );
    }

    return registeredEvents.map(event => {
      console.log('üéØ –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', event);
      
      return (
        <EventCard
          key={event.id}
          event={event}
          onPress={handleEventPress}
          isRegistered={true} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
          showRegisterButton={true}
        />
      );
    });
  };

  return (
    <Panel id={id} style={{ backgroundColor: '#000000' }}>
      <PanelHeader style={{ backgroundColor: '#1A1A1A', color: '#FFFFFF' }}>
        –¢—É–¥–∞ —è –ø–æ–π–¥—É!
      </PanelHeader>
      
      <Group style={{ backgroundColor: '#000000' }}>
        <Div style={{ padding: '0 16px 16px' }}>
          {renderRegisteredEvents()}
        </Div>
      </Group>

      <Navigation activeTab={activeTab} onTabChange={setActiveTab} />
    </Panel>
  );
};

MyRegistrations.propTypes = {
  id: PropTypes.string.isRequired,
  fetchedUser: PropTypes.shape({
    id: PropTypes.number,
    first_name: PropTypes.string,
    last_name: PropTypes.string,
    photo_200: PropTypes.string,
  }),
}; 