import React, { useState, useEffect } from 'react';
import { 
  Panel, 
  PanelHeader, 
  Group, 
  Div,
  Title,
  Text,
  Button,
  Avatar,
  Cell,
  Badge,
  Snackbar,
  Header
} from '@vkontakte/vkui';
import { 
  Icon28CalendarOutline, 
  Icon28PlaceOutline, 
  Icon28UserOutline,
  Icon28LinkOutline,
  Icon28ArrowLeftOutline,
  Icon28DeleteOutline,
  Icon28ShareOutline
} from '@vkontakte/icons';
import { useRouteNavigator, useParams } from '@vkontakte/vk-mini-apps-router';
import { eventsAPI, registrationsAPI, dateUtils, handleAPIError } from '../services/api';
import { Navigation } from '../components/Navigation';
import { Confetti } from '../components/Confetti';
import { Achievement } from '../components/Achievement';
import { useAchievements } from '../hooks/useAchievements';
import PropTypes from 'prop-types';

export const EventDetails = ({ id, fetchedUser }) => {
  const [event, setEvent] = useState(null);
  const [registrations, setRegistrations] = useState([]);
  const [isUserRegisteredForEvent, setIsUserRegisteredForEvent] = useState(false);
  const [loading, setLoading] = useState(true);
  const [snackbar, setSnackbar] = useState(null);
  const [activeTab, setActiveTab] = useState('events');
  const routeNavigator = useRouteNavigator();
  const { id: eventId } = useParams();
  
  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const {
    showConfetti,
    achievement,
    checkRegistrationAchievements,
    handleConfettiComplete,
    handleAchievementClose
  } = useAchievements(fetchedUser?.id);

  useEffect(() => {
    loadEventDetails();
  }, [eventId, fetchedUser]);

  const loadEventDetails = async () => {
    if (!eventId) {
      console.error('eventId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      setSnackbar({
        text: '–û—à–∏–±–∫–∞: ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω',
        mode: 'error'
      });
      return;
    }

    try {
      setLoading(true);
      
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å ID:', eventId);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      const eventResponse = await eventsAPI.getById(eventId);
      // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (!eventResponse || eventResponse.length === 0) {
        setEvent(null);
        setSnackbar({
          text: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          mode: 'error'
        });
        return;
      }
      setEvent(eventResponse[0]);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      const registrationsResponse = await registrationsAPI.getByEvent(eventId);
      // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
      setRegistrations(registrationsResponse || []);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (fetchedUser) {
        const checkResponse = await registrationsAPI.checkRegistration(eventId, fetchedUser.id);
        // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏
        setIsUserRegisteredForEvent(checkResponse && checkResponse.length > 0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      const errorMessage = handleAPIError(error);
      setSnackbar({ text: errorMessage, mode: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleRegister = () => {
    routeNavigator.push(`/register/${eventId}`);
  };

  const handleCancelRegistration = async () => {
    if (!fetchedUser || !eventId) {
      setSnackbar({
        text: '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        mode: 'error'
      });
      return;
    }

    try {
      await registrationsAPI.cancelRegistration(eventId, fetchedUser.id);
      setIsUserRegisteredForEvent(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
      const updatedRegistrations = await registrationsAPI.getByEvent(eventId);
      setRegistrations(updatedRegistrations || []);
      
      setSnackbar({
        text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
        mode: 'success'
      });
    } catch (error) {
      const errorMessage = handleAPIError(error);
      setSnackbar({ text: errorMessage, mode: 'error' });
    }
  };

  const handleBack = () => {
    routeNavigator.push('/');
  };

  const handleDeleteEvent = async () => {
    if (!fetchedUser || !eventId) {
      setSnackbar({
        text: '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        mode: 'error'
      });
      return;
    }

    try {
      await eventsAPI.delete(eventId);
      setSnackbar({
        text: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ',
        mode: 'success'
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        routeNavigator.push('/');
      }, 1000);
    } catch (error) {
      const errorMessage = handleAPIError(error);
      setSnackbar({ text: errorMessage, mode: 'error' });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
  const handleShareEvent = async () => {
    if (!event) {
      setSnackbar({
        text: '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        mode: 'error'
      });
      return;
    }

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      const eventUrl = `${window.location.origin}/event/${eventId}`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
      const shareText = `üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "${event.title}"\nüìÖ ${dateUtils.formatDate(event.date)}\nüìç ${event.location}\nüë• ${registrations.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VK Bridge
      if (window.bridge && window.bridge.send) {
        await window.bridge.send('VKWebAppShare', {
          link: eventUrl,
          text: shareText.substring(0, 100) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
        });
        
        setSnackbar({
          text: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
          mode: 'success'
        });
      } else {
        // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ - –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        if (navigator.clipboard) {
          await navigator.clipboard.writeText(`${shareText}\n\n${eventUrl}`);
          setSnackbar({
            text: '–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
            mode: 'success'
          });
        } else {
          // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
          const textArea = document.createElement('textarea');
          textArea.value = `${shareText}\n\n${eventUrl}`;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
          
          setSnackbar({
            text: '–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
            mode: 'success'
          });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      setSnackbar({
        text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        mode: 'error'
      });
    }
  };

  if (loading) {
    return (
      <Panel id={id} style={{ backgroundColor: '#000000' }}>
        <PanelHeader style={{ backgroundColor: '#000000', color: '#FFFFFF', borderBottom: '1px solid #333' }}>
          –ó–∞–≥—Ä—É–∑–∫–∞...
        </PanelHeader>
        <Group style={{ backgroundColor: '#000000' }}>
          <Div style={{ textAlign: 'center', padding: '40px 16px' }}>
            <Text style={{ color: '#FFFFFF' }}>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏...</Text>
          </Div>
        </Group>
        <Navigation activeTab={activeTab} onTabChange={setActiveTab} />
      </Panel>
    );
  }

  if (!event) {
    return (
      <Panel id={id} style={{ backgroundColor: '#000000' }}>
        <PanelHeader style={{ backgroundColor: '#000000', color: '#FFFFFF', borderBottom: '1px solid #333' }}>
          –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        </PanelHeader>
        <Group style={{ backgroundColor: '#000000' }}>
          <Div style={{ textAlign: 'center', padding: '40px 16px' }}>
            <Text style={{ color: '#FFFFFF' }}>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ</Text>
            <Button
              mode="primary"
              onClick={handleBack}
              style={{ marginTop: '16px' }}
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
            </Button>
          </Div>
        </Group>
        <Navigation activeTab={activeTab} onTabChange={setActiveTab} />
      </Panel>
    );
  }

  return (
    <Panel id={id} style={{ backgroundColor: '#000000' }}>
      <PanelHeader
        left={
          <Button
            mode="tertiary"
            onClick={handleBack}
            before={<Icon28ArrowLeftOutline />}
            style={{ color: '#FFFFFF' }}
          >
            –ù–∞–∑–∞–¥
          </Button>
        }
      >
        {event.title}
      </PanelHeader>
      
      <Group style={{ backgroundColor: '#000000' }}>
        <Div style={{ padding: '16px' }}>
          <Title level="1" style={{ color: '#FFFFFF', marginBottom: '16px' }}>
            {event.title}
          </Title>

          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
            <Icon28CalendarOutline style={{ color: '#0077FF', marginRight: '8px' }} />
            <Text style={{ color: '#CCCCCC' }}>
              {dateUtils.formatDate(event.date)}
            </Text>
          </div>

          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
            <Icon28PlaceOutline style={{ color: '#0077FF', marginRight: '8px' }} />
            <Text style={{ color: '#CCCCCC' }}>
              {event.location}
            </Text>
          </div>

          <Text style={{ color: '#AAAAAA', marginBottom: '24px', lineHeight: '1.6' }}>
            {event.description}
          </Text>

          <div style={{ display: 'flex', gap: '12px', marginBottom: '24px' }}>
            {event.vk_link && (
              <Button
                mode="secondary"
                before={<Icon28LinkOutline />}
                onClick={() => window.open(event.vk_link, '_blank')}
                style={{
                  backgroundColor: 'transparent',
                  border: '1px solid #0077FF',
                  color: '#0077FF',
                }}
              >
                –û—Ç–∫—Ä—ã—Ç—å –≤ –í–ö
              </Button>
            )}
            
            <Button
              mode="secondary"
              before={<Icon28ShareOutline />}
              onClick={handleShareEvent}
              style={{
                backgroundColor: 'transparent',
                border: '1px solid #0077FF',
                color: '#0077FF',
              }}
            >
              –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
            </Button>
          </div>

          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            marginBottom: '24px'
          }}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <Icon28UserOutline style={{ color: '#0077FF', marginRight: '4px' }} />
              <Text style={{ color: '#888888' }}>
                {registrations.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
              </Text>
            </div>

            {isUserRegisteredForEvent && (
              <Badge mode="prominent" style={{ backgroundColor: '#0077FF' }}>
                –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã
              </Badge>
            )}
          </div>

          {fetchedUser && (
            <div style={{ display: 'flex', gap: '12px', flexDirection: 'column' }}>
              <div style={{ display: 'flex', gap: '12px' }}>
                {!isUserRegisteredForEvent ? (
                  <Button
                    mode="primary"
                    onClick={handleRegister}
                    style={{
                      flex: 1,
                      backgroundColor: '#0077FF',
                      border: 'none',
                    }}
                  >
                    –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                  </Button>
                ) : (
                  <Button
                    mode="secondary"
                    onClick={handleCancelRegistration}
                    style={{
                      flex: 1,
                      backgroundColor: 'transparent',
                      border: '1px solid #FF3B30',
                      color: '#FF3B30',
                    }}
                  >
                    –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                  </Button>
                )}
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
              {fetchedUser && String(event.created_by) === String(fetchedUser.id) && (
                <Button
                  mode="secondary"
                  onClick={handleDeleteEvent}
                  before={<Icon28DeleteOutline />}
                  style={{
                    backgroundColor: 'transparent',
                    border: '1px solid #FF3B30',
                    color: '#FF3B30',
                  }}
                >
                  –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                </Button>
              )}
            </div>
          )}
        </Div>
      </Group>

      {registrations.length > 0 && (
        <Group style={{ backgroundColor: '#000000' }}>
          <Header style={{ color: '#FFFFFF' }}>
            –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({registrations.length})
          </Header>
          <Div style={{ padding: '0 16px 16px' }}>
            {registrations.map((registration, index) => {
              // –°–æ–∑–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –§–ò–û
              const initials = registration.full_name
                .split(' ')
                .map(name => name.charAt(0))
                .join('')
                .toUpperCase();
              
              return (
                <Cell
                  key={registration.id}
                  before={
                    <Avatar 
                      size={32} 
                      src={registration.photo}
                      
                    >
                      {initials}
                    </Avatar>
                  }
                  style={{
                    backgroundColor: '#1A1A1A',
                    marginBottom: '8px',
                    borderRadius: '8px',
                  }}
                >
                  <div>
                    <Text style={{ color: '#FFFFFF', fontWeight: '500' }}>
                      {registration.full_name}
                    </Text>
                    <Text style={{ color: '#888888', fontSize: '14px' }}>
                      {registration.institute} ‚Ä¢ {registration.academic_group}
                    </Text>
                    {registration.birth_date && (
                      <Text style={{ color: '#666666', fontSize: '12px' }}>
                        {new Date(registration.birth_date).toLocaleDateString('ru-RU')}
                      </Text>
                    )}
                  </div>
                </Cell>
              );
            })}
          </Div>
        </Group>
      )}

      {snackbar && (
        <Snackbar
          onClose={() => setSnackbar(null)}
          duration={3000}
          mode={snackbar.mode}
        >
          {snackbar.text}
        </Snackbar>
      )}

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      <Confetti 
        isActive={showConfetti} 
        onComplete={handleConfettiComplete} 
      />
      <Achievement 
        isVisible={achievement.isVisible}
        message={achievement.message}
        onClose={handleAchievementClose}
      />

      <Navigation activeTab={activeTab} onTabChange={setActiveTab} />
    </Panel>
  );
};

EventDetails.propTypes = {
  id: PropTypes.string.isRequired,
  fetchedUser: PropTypes.shape({
    id: PropTypes.number,
    first_name: PropTypes.string,
    last_name: PropTypes.string,
    photo_200: PropTypes.string,
  }),
}; 